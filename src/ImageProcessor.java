import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Fachry Ghifary
 */
public class ImageProcessor extends javax.swing.JFrame {

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        run();
    }

    public static void run(){
        ImageProcessor ip = new ImageProcessor();
        ip.setIconImage(new ImageIcon(System.getProperty("user.dir")+"\\src\\assets\\logoImageProcessing.png").getImage());
        if (ip.lblImage.getIcon() != null){
            ip.enableButton();
        }
        ip.setTitle("Image Processor");
        ip.setLocationRelativeTo(null);
        ip.setDefaultCloseOperation(EXIT_ON_CLOSE);
        ip.setVisible(true);
    }

    /**
     * Creates new form ImageProcessor
     */
    public ImageProcessor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrlpnMain = new javax.swing.JScrollPane();
        pnlMain = new javax.swing.JPanel();
        lblImage = new javax.swing.JLabel();
        pnlButton = new javax.swing.JPanel();
        btnNormal = new javax.swing.JButton();
        btnInvert = new javax.swing.JButton();
        btnGreyScale = new javax.swing.JButton();
        btnSepia = new javax.swing.JButton();
        btnMonoChrome = new javax.swing.JButton();
        btnFailureBlur = new javax.swing.JButton();
        btnGaussianBlur = new javax.swing.JButton();
        btnBlur = new javax.swing.JButton();
        btnMotionBlur = new javax.swing.JButton();
        btnPixelated = new javax.swing.JButton();
        btnBrighter = new javax.swing.JButton();
        btnDarker = new javax.swing.JButton();
        btnShowRed = new javax.swing.JButton();
        btnShowGreen = new javax.swing.JButton();
        btnShowBlue = new javax.swing.JButton();
        btnTransparency = new javax.swing.JButton();
        menubarMain = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuitemOpenImage = new javax.swing.JMenuItem();
        menuitemSaveImage = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(171, 205, 239));

        scrlpnMain.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 102), 2));

        pnlMain.setBackground(new java.awt.Color(171, 205, 239));

        lblImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImage.setToolTipText("Choose a picture (.png/.jpg/.jpeg)");
        lblImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 102), 2));
        lblImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblImageMouseClicked(evt);
            }
        });

        pnlButton.setBackground(new java.awt.Color(18, 52, 86));
        pnlButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 102), 2, true));

        btnNormal.setText("Normal");
        btnNormal.setEnabled(false);
        btnNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNormalActionPerformed(evt);
            }
        });

        btnInvert.setText("Invert");
        btnInvert.setEnabled(false);
        btnInvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInvertActionPerformed(evt);
            }
        });

        btnGreyScale.setText("GreyScale");
        btnGreyScale.setEnabled(false);
        btnGreyScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGreyScaleActionPerformed(evt);
            }
        });

        btnSepia.setText("Sepia");
        btnSepia.setEnabled(false);
        btnSepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSepiaActionPerformed(evt);
            }
        });

        btnMonoChrome.setText("MonoChrome");
        btnMonoChrome.setEnabled(false);
        btnMonoChrome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMonoChromeActionPerformed(evt);
            }
        });

        btnFailureBlur.setText("Failure Blur");
        btnFailureBlur.setEnabled(false);
        btnFailureBlur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFailureBlurActionPerformed(evt);
            }
        });

        btnGaussianBlur.setText("Gaussian Blur");
        btnGaussianBlur.setEnabled(false);
        btnGaussianBlur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGaussianBlurActionPerformed(evt);
            }
        });

        btnBlur.setText("Blur");
        btnBlur.setEnabled(false);
        btnBlur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBlurActionPerformed(evt);
            }
        });

        btnMotionBlur.setText("Motion Blur");
        btnMotionBlur.setEnabled(false);
        btnMotionBlur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMotionBlurActionPerformed(evt);
            }
        });

        btnPixelated.setText("Pixelated");
        btnPixelated.setEnabled(false);
        btnPixelated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPixelatedActionPerformed(evt);
            }
        });

        btnBrighter.setText("Brighter");
        btnBrighter.setEnabled(false);
        btnBrighter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrighterActionPerformed(evt);
            }
        });

        btnDarker.setText("Darker");
        btnDarker.setEnabled(false);
        btnDarker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDarkerActionPerformed(evt);
            }
        });

        btnShowRed.setText("Show Red");
        btnShowRed.setEnabled(false);
        btnShowRed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowRedActionPerformed(evt);
            }
        });

        btnShowGreen.setText("Show Green");
        btnShowGreen.setEnabled(false);
        btnShowGreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowGreenActionPerformed(evt);
            }
        });

        btnShowBlue.setText("Show Blue");
        btnShowBlue.setEnabled(false);
        btnShowBlue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowBlueActionPerformed(evt);
            }
        });

        btnTransparency.setText("Transparency");
        btnTransparency.setEnabled(false);
        btnTransparency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTransparencyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlButtonLayout = new javax.swing.GroupLayout(pnlButton);
        pnlButton.setLayout(pnlButtonLayout);
        pnlButtonLayout.setHorizontalGroup(
            pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlButtonLayout.createSequentialGroup()
                        .addComponent(btnDarker)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBrighter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnShowRed)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnShowGreen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnShowBlue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnTransparency))
                    .addGroup(pnlButtonLayout.createSequentialGroup()
                        .addComponent(btnNormal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnInvert)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnGreyScale)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSepia)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnMonoChrome))
                    .addGroup(pnlButtonLayout.createSequentialGroup()
                        .addComponent(btnFailureBlur)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnGaussianBlur)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBlur)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnMotionBlur)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPixelated)))
                .addContainerGap(369, Short.MAX_VALUE))
        );
        pnlButtonLayout.setVerticalGroup(
            pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInvert)
                    .addComponent(btnGreyScale)
                    .addComponent(btnNormal)
                    .addComponent(btnSepia)
                    .addComponent(btnMonoChrome))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFailureBlur)
                    .addComponent(btnGaussianBlur)
                    .addComponent(btnBlur)
                    .addComponent(btnPixelated)
                    .addComponent(btnMotionBlur))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnBrighter)
                        .addComponent(btnShowRed)
                        .addComponent(btnShowGreen)
                        .addComponent(btnShowBlue)
                        .addComponent(btnTransparency))
                    .addComponent(btnDarker))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblImage, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        scrlpnMain.setViewportView(pnlMain);

        menubarMain.setBackground(new java.awt.Color(18, 52, 86));
        menubarMain.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 102), 0, true));
        menubarMain.setForeground(new java.awt.Color(18, 52, 86));

        menuFile.setBackground(new java.awt.Color(18, 52, 86));
        menuFile.setForeground(new java.awt.Color(171, 205, 239));
        menuFile.setText("File");

        menuitemOpenImage.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuitemOpenImage.setBackground(new java.awt.Color(18, 52, 86));
        menuitemOpenImage.setForeground(new java.awt.Color(171, 205, 239));
        menuitemOpenImage.setText("Open Image");
        menuitemOpenImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemOpenImageActionPerformed(evt);
            }
        });
        menuFile.add(menuitemOpenImage);

        menuitemSaveImage.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuitemSaveImage.setBackground(new java.awt.Color(18, 52, 86));
        menuitemSaveImage.setForeground(new java.awt.Color(171, 205, 239));
        menuitemSaveImage.setText("Save Image");
        menuitemSaveImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemSaveImageActionPerformed(evt);
            }
        });
        menuFile.add(menuitemSaveImage);

        menubarMain.add(menuFile);

        menuEdit.setBackground(new java.awt.Color(18, 52, 86));
        menuEdit.setForeground(new java.awt.Color(171, 205, 239));
        menuEdit.setText("Edit");
        menubarMain.add(menuEdit);

        setJMenuBar(menubarMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrlpnMain, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 969, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(scrlpnMain, javax.swing.GroupLayout.DEFAULT_SIZE, 665, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ enableButton, openFile, readImage

    private void enableButton(){
        btnNormal.setEnabled(true);
        btnInvert.setEnabled(true);
        btnGreyScale.setEnabled(true);
        btnSepia.setEnabled(true);
        btnMonoChrome.setEnabled(true);
        
        btnFailureBlur.setEnabled(true);
        btnGaussianBlur.setEnabled(true);
        btnBlur.setEnabled(true);
        btnMotionBlur.setEnabled(true);
        btnPixelated.setEnabled(true);
        
        btnBrighter.setEnabled(true);
        btnDarker.setEnabled(true);
        btnShowRed.setEnabled(true);
        btnShowGreen.setEnabled(true);
        btnShowBlue.setEnabled(true);
        btnTransparency.setEnabled(true);
    }

    private void openFileImage(){
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(System.getProperty("user.dir")));
        if (fc.showDialog(null, "Choose Image") == JFileChooser.APPROVE_OPTION){
            pathImage = fc.getSelectedFile().getPath();
            ImageIcon image = new ImageIcon(pathImage);
            lblImage.setIcon(image);
            enableButton();
        }
    }

    private BufferedImage readImage(){
        try {
            if (pathImage == null && inputFile == null){
                openFileImage();
            } else {
                inputFile = ImageIO.read(new File(pathImage));
            }
        } catch (IOException e) {
        }
        return inputFile;
    }
    
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ isNotANonNegativeNumber, showErrorInputIsNotANonNegativeNumber, showErrorInputIsTooBig, showErrorThicknessGTRange

    private boolean isNotANonNegativeNumber(String s){
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) < '0' || s.charAt(i) > '9'){
                return true;
            }
        }
        return false;
    }
    
    private void showErrorInputIsNotANonNegativeNumber(){
        JOptionPane.showMessageDialog(null, "Input must be a non-negative number!", "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    private void showErrorInputIsTooBig(){
        JOptionPane.showMessageDialog(null, "Input is too big!", "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    private void showErrorThicknessGTRange(){
        JOptionPane.showMessageDialog(null, "Thickness can't be bigger than range!", "Error", JOptionPane.ERROR_MESSAGE);
    }
    
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Menu Bar and its Item

    private void menuitemOpenImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemOpenImageActionPerformed
        openFileImage();
    }//GEN-LAST:event_menuitemOpenImageActionPerformed

    private void menuitemSaveImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemSaveImageActionPerformed
        System.out.println("Save Image Clicked");
        String fileName = JOptionPane.showInputDialog("Input File Name : (must include the image extension, i.e : .jpeg/.jpg/.png)");
        if (fileName == null){
            showErrorInputIsNotANonNegativeNumber();
            System.out.println("Save Failed");
        } else {
            try {
                // change the directory to ur liking
                ImageIO.write(inputFile, "png", new File(System.getProperty("user.dir")+"\\src\\saved_images\\"+fileName));
                System.out.println("Save Success");
            } catch (IOException ex) {
                Logger.getLogger(ImageProcessor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_menuitemSaveImageActionPerformed

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ main label for image to show

    private void lblImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblImageMouseClicked
        openFileImage();
    }//GEN-LAST:event_lblImageMouseClicked

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ use this when u wanna see the rgb value
/*
if (x == 0 && y == 0){
    System.out.println(sumRGBPixel[COL_RED]);
    System.out.println(sumRGBPixel[COL_GREEN]);
    System.out.println(sumRGBPixel[COL_BLUE]);
    System.out.println(sumRGBPixel[COL_ALPHA]);
}
*/
    
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ row 1 : normal, invert, greyscale, sepia, monochrome

    private void btnNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNormalActionPerformed
        System.out.println("Return Normal Button Clicked");
        ImageIcon image = new ImageIcon(pathImage);
        lblImage.setIcon(image);
        System.out.println("Return Normal Done");
    }//GEN-LAST:event_btnNormalActionPerformed
    
    private void btnInvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInvertActionPerformed
        System.out.println("Invert Image Button Clicked");
        inputFile = readImage();

        for (int x = 0; x < inputFile.getWidth(); x++) {
            for (int y = 0; y < inputFile.getHeight(); y++) {
                int rgba = inputFile.getRGB(x, y);
                Color col = new Color(rgba, true);
                col = new Color(255 - col.getRed(),
                                255 - col.getGreen(),
                                255 - col.getBlue(),
                                col.getAlpha());
                inputFile.setRGB(x, y, col.getRGB());
            }
        }
        lblImage.setIcon(new ImageIcon(inputFile));
        System.out.println("Image Processing Invert Done");
    }//GEN-LAST:event_btnInvertActionPerformed

    private void btnGreyScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGreyScaleActionPerformed
        System.out.println("GreyScale Button Clicked");
        inputFile = readImage();

        for (int x = 0; x < inputFile.getWidth(); x++) {
            for (int y = 0; y < inputFile.getHeight(); y++) {
                int rgba = inputFile.getRGB(x, y);
                Color col = new Color(rgba, true);
                int greyLevel = (col.getRed() + col.getGreen()+ col.getBlue())/3;
                col = new Color((col.getAlpha() << 24)
                                + (greyLevel << 16)
                                + (greyLevel << 8)
                                + greyLevel,
                                true);
                inputFile.setRGB(x, y, col.getRGB());
            }
        }
        lblImage.setIcon(new ImageIcon(inputFile));
        System.out.println("Image Processing GreyScale Done");
    }//GEN-LAST:event_btnGreyScaleActionPerformed

    private void btnSepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSepiaActionPerformed
        System.out.println("Sepia Button Clicked");
        inputFile = readImage();

        for (int x = 0; x < inputFile.getWidth(); x++) {
            for (int y = 0; y < inputFile.getHeight(); y++) {
                int rgba = inputFile.getRGB(x, y);
                Color col = new Color(rgba, true);
                int R = col.getRed();
                int G = col.getGreen();
                int B = col.getBlue();
                int newR = (int)(0.393*R + 0.769*G + 0.189*B);
                int newG = (int)(0.349*R + 0.686*G + 0.168*B);
                int newB = (int)(0.272*R + 0.534*G + 0.131*B);
                col = new Color ((newR > 255 ? 255 : newR)
                                ,(newG > 255 ? 255 : newG)
                                ,(newB > 255 ? 255 : newB)
                                ,col.getAlpha());
                inputFile.setRGB(x, y, col.getRGB());
            }
        }
        lblImage.setIcon(new ImageIcon(inputFile));
        System.out.println("Image Processing Sepia Done");
    }//GEN-LAST:event_btnSepiaActionPerformed

    private void btnMonoChromeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMonoChromeActionPerformed
        System.out.println("MonoChrome Button Clicked");
        inputFile = readImage();

        String monoThresholdInputDialog = JOptionPane.showInputDialog("Input mono threshold [0-765], 368 recommended");
        if(monoThresholdInputDialog == null){
            System.out.println("MonoChrome Cancelled");
        } else if (isNotANonNegativeNumber(monoThresholdInputDialog)){
           showErrorInputIsNotANonNegativeNumber();
        } else if (Integer.parseInt(monoThresholdInputDialog) > 765){
           showErrorInputIsTooBig();
        } else {
            int MONO_THRESHOLD = Integer.parseInt(monoThresholdInputDialog);
            for (int x = 0; x < inputFile.getWidth(); x++) {
                for (int y = 0; y < inputFile.getHeight(); y++) {
                    int rgba = inputFile.getRGB(x, y);
                    Color col = new Color(rgba, true);
                    if (col.getRed() + col.getGreen() + col.getBlue() > MONO_THRESHOLD)
                        col = new Color(255, 255, 255, col.getAlpha());
                    else
                        col = new Color(0, 0, 0, col.getAlpha());
                    inputFile.setRGB(x, y, col.getRGB());
                }
            }
            lblImage.setIcon(new ImageIcon(inputFile));
        }
        System.out.println("Image Processing MonoChrome Done");
    }//GEN-LAST:event_btnMonoChromeActionPerformed
    
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ row 2 : failureblur, gaussianblur, blur, motionblur, pixelated
    
    private void btnFailureBlurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFailureBlurActionPerformed
        System.out.println("Failure Blur Button Clicked");
        inputFile = readImage();
        String rangeInputDialog = JOptionPane.showInputDialog("Input blur range");
        if(rangeInputDialog == null){
            System.out.println("Failure Blur Cancelled");
        } else if (isNotANonNegativeNumber(rangeInputDialog)){
           showErrorInputIsNotANonNegativeNumber();
        } else {
            System.out.println("Processing");
            int[][] rgbaArray = new int[inputFile.getWidth()][inputFile.getHeight()];
            for (int x = 0; x < inputFile.getWidth(); x++) {
                for (int y = 0; y < inputFile.getHeight(); y++) {
                    rgbaArray[x][y] = inputFile.getRGB(x, y);
                }
            }
            int rangeBlurAdj = Integer.parseInt(rangeInputDialog);
            for (int x = 0; x < inputFile.getWidth(); x++) {
                for (int y = 0; y < inputFile.getHeight(); y++) {
                    long sumRGBPixel = 0;
                    for (int i = -rangeBlurAdj; i <= rangeBlurAdj; i++) {
                        for (int j = -rangeBlurAdj; j <= rangeBlurAdj; j++) {
                            if ((x+i < 0 || x+i > inputFile.getWidth()-1) || (y+j < 0 || y+j > inputFile.getHeight()-1)){
                                // out of bounds then set to this pixel value
                                sumRGBPixel += rgbaArray[x][y];
                            } else {
                                sumRGBPixel += rgbaArray[x+i][y+j];
                            }
                        }
                    }
                    long pixelCount = 1 + rangeBlurAdj*2;
                    pixelCount *= pixelCount;
                    Color col = new Color((int)(sumRGBPixel/pixelCount), true);
                    inputFile.setRGB(x, y, col.getRGB());
                }
            }
            lblImage.setIcon(new ImageIcon(inputFile));
        }
    }//GEN-LAST:event_btnFailureBlurActionPerformed

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ rgbValueImage, sumRGBPixel, GaussianGrid

        private int[][][] rgbValueImage(){
       int[][][] rgbaArray = new int[inputFile.getWidth()][inputFile.getHeight()][4];
        for (int x = 0; x < inputFile.getWidth(); x++) {
            for (int y = 0; y < inputFile.getHeight(); y++) {
                Color col = new Color(inputFile.getRGB(x, y), true);
                rgbaArray[x][y][COL_RED] = col.getRed();
                rgbaArray[x][y][COL_GREEN] = col.getGreen();
                rgbaArray[x][y][COL_BLUE] = col.getBlue();
                rgbaArray[x][y][COL_ALPHA] = col.getAlpha();
            }
        }
        return rgbaArray;
    }

    private long[] sumRGBPixel(int rangeBlurAdj, int x, int y, int[][][] rgbaArray, int[][] constantGrid){
        long[] sumRGBPixel = new long[4];
        if (constantGrid == null){
            for (int i = -rangeBlurAdj; i <= rangeBlurAdj; i++) {
                for (int j = -rangeBlurAdj; j <= rangeBlurAdj; j++) {
                    if ((x+i < 0 || x+i > inputFile.getWidth()-1) || (y+j < 0 || y+j > inputFile.getHeight()-1)){
                        // out of bounds then set to this pixel value
                        sumRGBPixel[COL_RED] += rgbaArray[x][y][COL_RED];
                        sumRGBPixel[COL_GREEN] += rgbaArray[x][y][COL_GREEN];
                        sumRGBPixel[COL_BLUE] += rgbaArray[x][y][COL_BLUE];
                        sumRGBPixel[COL_ALPHA] += rgbaArray[x][y][COL_ALPHA];
                    } else {
                        sumRGBPixel[COL_RED] += rgbaArray[x+i][y+j][COL_RED];
                        sumRGBPixel[COL_GREEN] += rgbaArray[x+i][y+j][COL_GREEN];
                        sumRGBPixel[COL_BLUE] += rgbaArray[x+i][y+j][COL_BLUE];
                        sumRGBPixel[COL_ALPHA] += rgbaArray[x+i][y+j][COL_ALPHA];
                    }
                }
            }
        } else {
            for (int i = -rangeBlurAdj; i <= rangeBlurAdj; i++) {
                for (int j = -rangeBlurAdj; j <= rangeBlurAdj; j++) {
                    if ((x+i < 0 || x+i > inputFile.getWidth()-1) || (y+j < 0 || y+j > inputFile.getHeight()-1)){
                        // out of bounds then set to this pixel value
                        sumRGBPixel[COL_RED] += constantGrid[rangeBlurAdj+i][rangeBlurAdj+j]*rgbaArray[x][y][COL_RED];
                        sumRGBPixel[COL_GREEN] += constantGrid[rangeBlurAdj+i][rangeBlurAdj+j]*rgbaArray[x][y][COL_GREEN];
                        sumRGBPixel[COL_BLUE] += constantGrid[rangeBlurAdj+i][rangeBlurAdj+j]*rgbaArray[x][y][COL_BLUE];
                        sumRGBPixel[COL_ALPHA] += constantGrid[rangeBlurAdj+i][rangeBlurAdj+j]*rgbaArray[x][y][COL_ALPHA];
                    } else {
                        sumRGBPixel[COL_RED] += constantGrid[rangeBlurAdj+i][rangeBlurAdj+j]*rgbaArray[x+i][y+j][COL_RED];
                        sumRGBPixel[COL_GREEN] += constantGrid[rangeBlurAdj+i][rangeBlurAdj+j]*rgbaArray[x+i][y+j][COL_GREEN];
                        sumRGBPixel[COL_BLUE] += constantGrid[rangeBlurAdj+i][rangeBlurAdj+j]*rgbaArray[x+i][y+j][COL_BLUE];
                        sumRGBPixel[COL_ALPHA] += constantGrid[rangeBlurAdj+i][rangeBlurAdj+j]*rgbaArray[x+i][y+j][COL_ALPHA];
                    }
                    // System.out.println("sumRGB : " + (x+i) + " " + (y+j) + " " + sumRGBPixel[COL_RED] + " " + sumRGBPixel[COL_GREEN] + " " + sumRGBPixel[COL_BLUE] + " " + sumRGBPixel[COL_ALPHA]);
                    // System.out.println("constant grid : " + constantGrid[rangeBlurAdj+i][rangeBlurAdj+j]);
                }
            }
        }
        return sumRGBPixel;
    }

    private int[][] GaussianGrid(int range){
        int[][] a = new int[2*range+1][2*range+1];
        for (int i = -range; i <= 0; i++) {
            for (int j = -range; j <= 0; j++) {
                a[range+i][range+j] = (int)(Math.pow(2, 2*range-Math.abs(i+j)));
            }
            for (int j = -1; j >= -range; j--) {
                a[range+i][range+j] = (int)(Math.pow(2, 2*range-Math.abs(i+j)));
            }
        }
        for (int i = -1; i >= -range; i--) {
            for (int j = -range; j <= 0; j++) {
                a[range+i][range+j] = (int)(Math.pow(2, 2*range-Math.abs(i+j)));
            }
            for (int j = -1; j >= -range; j--) {
                a[range+i][range+j] = (int)(Math.pow(2, 2*range-Math.abs(i+j)));
            }
        }
        return a;
    }
    
    private void btnGaussianBlurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGaussianBlurActionPerformed
        System.out.println("Gaussian Blur Button Clicked");
        inputFile = readImage();

        int failCheckAdvance = JOptionPane.showConfirmDialog(null, "Actually this Gaussian blur are a failure, proceed?", "Warning", JOptionPane.WARNING_MESSAGE);
        if (failCheckAdvance == -1 || failCheckAdvance == 1 || failCheckAdvance == 2){
            System.out.println("Gaussian Blur Cancelled");
            return;
        }
        
        String rangeInputDialog = JOptionPane.showInputDialog("Input blur range");
        if(rangeInputDialog == null){
            System.out.println("Gaussian Blur Cancelled");
        } else if (isNotANonNegativeNumber(rangeInputDialog)){
           showErrorInputIsNotANonNegativeNumber();
        } else {
            int rangeBlurAdj = Integer.parseInt(rangeInputDialog);
            if (rangeBlurAdj > 10){
                showErrorInputIsTooBig();
                System.out.println("Gaussian Blur Cancelled");
            } 
            System.out.println("Processing");
            int[][][] rgbaArray = rgbValueImage();
            int[][] gaussianGrid = GaussianGrid(rangeBlurAdj);
            long pixelCount = (long)(3*Math.pow(2, rangeBlurAdj)-2);
            pixelCount *= pixelCount;
            for (int x = 0; x < inputFile.getWidth(); x++) {
                for (int y = 0; y < inputFile.getHeight(); y++) {
                    long[] sumRGBPixel = sumRGBPixel(rangeBlurAdj, x, y, rgbaArray, gaussianGrid);
                    Color col = new Color((int)(sumRGBPixel[COL_RED]/pixelCount),
                                        (int)(sumRGBPixel[COL_GREEN]/pixelCount),
                                        (int)(sumRGBPixel[COL_BLUE]/pixelCount),
                                        (int)(sumRGBPixel[COL_ALPHA]/pixelCount));
                    inputFile.setRGB(x, y, col.getRGB());
                }
            }
            lblImage.setIcon(new ImageIcon(inputFile));
            System.out.println("Image Processing Gaussian Blur Done");
        }
    }//GEN-LAST:event_btnGaussianBlurActionPerformed
    
    private void btnBlurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBlurActionPerformed
        System.out.println("Blur Button Clicked");
        inputFile = readImage();

        String rangeInputDialog = JOptionPane.showInputDialog("Input blur range");
        if(rangeInputDialog == null){
            System.out.println("Blur Cancelled");
        } else if (isNotANonNegativeNumber(rangeInputDialog)){
           showErrorInputIsNotANonNegativeNumber();
        } else {
            System.out.println("Processing");
            int rangeBlurAdj = Integer.parseInt(rangeInputDialog);
            int[][][] rgbaArray = rgbValueImage();
            long pixelCount = 2*rangeBlurAdj+1;
            pixelCount *= pixelCount;
            for (int x = 0; x < inputFile.getWidth(); x++) {
                for (int y = 0; y < inputFile.getHeight(); y++) {
                    long[] sumRGBPixel = sumRGBPixel(rangeBlurAdj, x, y, rgbaArray, null);
                    Color col = new Color((int)(sumRGBPixel[COL_RED]/pixelCount),
                                        (int)(sumRGBPixel[COL_GREEN]/pixelCount),
                                        (int)(sumRGBPixel[COL_BLUE]/pixelCount),
                                        (int)(sumRGBPixel[COL_ALPHA]/pixelCount));
                    inputFile.setRGB(x, y, col.getRGB());
                }
            }
            lblImage.setIcon(new ImageIcon(inputFile));
            System.out.println("Image Processing Blur Done");
        }
    }//GEN-LAST:event_btnBlurActionPerformed

    private int[][] MotionGrid(String direction, int range, int thickness){
        int[][] a = null;
        switch (direction) {
            case "HORIZONTAL" -> {
                a = new int[2*range+1][2*range+1];
                for (int i = -range; i <= range; i++) {
                    for (int j = 1-thickness; j <= thickness-1; j++) {
                        a[range+i][thickness+j] = thickness-Math.abs(j);
                    }
                }
            }
            case "VERTICAL" -> {
                a = new int[2*range+1][2*range+1];
                for (int i = 1-thickness; i <= thickness-1; i++) {
                    for (int j = -range; j <= range; j++) {
                        a[thickness+i][range+j] = thickness-Math.abs(i);
                        // System.out.print(a[thickness+i][range+j] + (j == range ? "\n" : " "));
                    }
                }
            }
            case "DIAGONAL_LEFT_TO_RIGHT" -> {
            }
            default -> {
            }
        }
//            a = new int[2*range+1][2*range+1];
        return a;
    }
    
    private void btnMotionBlurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMotionBlurActionPerformed
        System.out.println("Motion Blur Button Clicked");
        inputFile = readImage();

        String directionConfirmDialog = (String)JOptionPane
                        .showInputDialog(null, "Input image motion direction will blur"
                                , "Input Direction", JOptionPane.QUESTION_MESSAGE
                                , new ImageIcon(System.getProperty("user.dir")+"\\src\\assets\\logoImageProcessor_motionBlur31.png")
                                , new String[]{"HORIZONTAL", "VERTICAL", "DIAGONAL_LEFT_TO_RIGHT", "DIAGONAL_RIGHT_TO_LEFT"}
                                , 0);
        if(directionConfirmDialog == null){
            System.out.println("Motion Blur Cancelled");
            return;
        }
        
        String rangeInputDialog = JOptionPane.showInputDialog("Input blur range");
        if(rangeInputDialog == null){
            System.out.println("Motion Blur Cancelled");
            return;
        }
        
        String thicknessInputDialog = JOptionPane.showInputDialog("Input blur thickness");
        if(thicknessInputDialog == null){
            System.out.println("Motion Blur Cancelled");
            return;
        }
        
        if (isNotANonNegativeNumber(rangeInputDialog) || isNotANonNegativeNumber(thicknessInputDialog)){
           showErrorInputIsNotANonNegativeNumber();
        } else {
            int rangeBlurAdj = Integer.parseInt(rangeInputDialog);
            int thicknessBlur = Integer.parseInt(thicknessInputDialog);
            if (thicknessBlur > rangeBlurAdj){
                showErrorThicknessGTRange();
            }
            System.out.println("Processing");
            System.out.println(directionConfirmDialog + " " + rangeInputDialog + " " + thicknessBlur);
            int[][][] rgbaArray = rgbValueImage();
            int[][] motionGrid = MotionGrid(directionConfirmDialog, rangeBlurAdj, thicknessBlur);
            long pixelCount = thicknessBlur*thicknessBlur*(2*rangeBlurAdj+1);
            if (directionConfirmDialog.equals("HORIZONTAL") || directionConfirmDialog.equals("vERTICAL")){
                // do nothing cuz the pixelcount are correct
            } else {
//                pixelCount = ;
            }
            for (int x = 0; x < inputFile.getWidth(); x++) {
                for (int y = 0; y < inputFile.getHeight(); y++) {
                    long[] sumRGBPixel = sumRGBPixel(rangeBlurAdj, x, y, rgbaArray, motionGrid);
//                    if (x == 0 && y == 0){
                        // System.out.println("\tmotion blur pixel x,y :" +x + " " + y);
                        // System.out.print(sumRGBPixel[COL_RED]/pixelCount + " ");
                        // System.out.print(sumRGBPixel[COL_GREEN]/pixelCount + " ");
                        // System.out.print(sumRGBPixel[COL_BLUE]/pixelCount + " ");
                        // System.out.print(sumRGBPixel[COL_ALPHA]/pixelCount + "\n");
//                    }
                    Color col = new Color((int)(sumRGBPixel[COL_RED]/pixelCount),
                                        (int)(sumRGBPixel[COL_GREEN]/pixelCount),
                                        (int)(sumRGBPixel[COL_BLUE]/pixelCount),
                                        (int)(sumRGBPixel[COL_ALPHA]/pixelCount));
                    inputFile.setRGB(x, y, col.getRGB());
                }
            }
            lblImage.setIcon(new ImageIcon(inputFile));
            System.out.println("Image Processing Motion Blur Done");
        }
    }//GEN-LAST:event_btnMotionBlurActionPerformed

    private void btnPixelatedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPixelatedActionPerformed
        System.out.println("Pixelated Button Clicked");
        inputFile = readImage();

        String rangeInputDialog = JOptionPane.showInputDialog("Input pixel range");
        if(rangeInputDialog == null){
            System.out.println("Pixelated Cancelled");
        } else if (isNotANonNegativeNumber(rangeInputDialog)){
           showErrorInputIsNotANonNegativeNumber();
        } else {
            System.out.println("Processing");
            int rangeBlurAdj = Integer.parseInt(rangeInputDialog);
            int[][][] rgbaArray = rgbValueImage();
            long pixelCount = 2*rangeBlurAdj+1;
            pixelCount *= pixelCount;
            for (int x = rangeBlurAdj; x < inputFile.getWidth(); x+=2*rangeBlurAdj+1) {
                for (int y = rangeBlurAdj; y < inputFile.getHeight(); y+=2*rangeBlurAdj+1) {
                    long[] sumRGBPixel = sumRGBPixel(rangeBlurAdj, x, y, rgbaArray, null);
                    Color col = new Color((int)(sumRGBPixel[COL_RED]/pixelCount),
                                        (int)(sumRGBPixel[COL_GREEN]/pixelCount),
                                        (int)(sumRGBPixel[COL_BLUE]/pixelCount),
                                        (int)(sumRGBPixel[COL_ALPHA]/pixelCount));
                    for (int i = -rangeBlurAdj; i <= rangeBlurAdj; i++) {
                        for (int j = -rangeBlurAdj; j <= rangeBlurAdj; j++) {
                            if ((x+i < 0 || x+i > inputFile.getWidth()-1) || (y+j < 0 || y+j > inputFile.getHeight()-1)){
                                // do nothing cuz out of bound
                            } else {
                                inputFile.setRGB(x+i, y+j, col.getRGB());
                            }
                        }
                    }
                }
            }
            lblImage.setIcon(new ImageIcon(inputFile));
            System.out.println("Image Processing Pixelated Done");
        }
    }//GEN-LAST:event_btnPixelatedActionPerformed

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ row 3 : brighter, darker, showred, showgreen, showblue, transparency

    private void btnBrighterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrighterActionPerformed
        System.out.println("Brighter Button Clicked");
        inputFile = readImage();

        for (int x = 0; x < inputFile.getWidth(); x++) {
            for (int y = 0; y < inputFile.getHeight(); y++) {
                int rgba = inputFile.getRGB(x, y);
                Color col = new Color(rgba, true);
                col = new Color(
                        (col.getRed()+25 > 255 ? 255 : col.getRed()+25)
                        , (col.getGreen()+25 > 255 ? 255 : col.getGreen()+25)
                        , col.getBlue()+25 > 255 ? 255 : col.getBlue()+25
                        ,col.getAlpha());
                inputFile.setRGB(x, y, col.getRGB());
            }
        }
        lblImage.setIcon(new ImageIcon(inputFile));
        System.out.println("Image Processing Brighter Done");
    }//GEN-LAST:event_btnBrighterActionPerformed

    private void btnDarkerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDarkerActionPerformed
        System.out.println("Darker Button Clicked");
        inputFile = readImage();

        for (int x = 0; x < inputFile.getWidth(); x++) {
            for (int y = 0; y < inputFile.getHeight(); y++) {
                int rgba = inputFile.getRGB(x, y);
                Color col = new Color(rgba, true);
                col = new Color(
                        (col.getRed()-25 < 0 ? 0 : col.getRed()-25)
                        , (col.getGreen()-25 < 0 ? 0 : col.getGreen()-25)
                        , col.getBlue()-25 < 0 ? 0 : col.getBlue()-25
                        , col.getAlpha());
                inputFile.setRGB(x, y, col.getRGB());
            }
        }
        lblImage.setIcon(new ImageIcon(inputFile));
        System.out.println("Image Processing Darker Done");
    }//GEN-LAST:event_btnDarkerActionPerformed

    private void btnShowRedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowRedActionPerformed
        System.out.println("Show Red Only Button Clicked");
        inputFile = readImage();

        for (int x = 0; x < inputFile.getWidth(); x++) {
            for (int y = 0; y < inputFile.getHeight(); y++) {
                int rgba = inputFile.getRGB(x, y);
                Color col = new Color(rgba, true);
                col = new Color(col.getRed(), 0, 0, col.getAlpha());
                inputFile.setRGB(x, y, col.getRGB());
            }
        }
        lblImage.setIcon(new ImageIcon(inputFile));
        System.out.println("Image Processing Show Red Done");
    }//GEN-LAST:event_btnShowRedActionPerformed

    private void btnShowGreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowGreenActionPerformed
        System.out.println("Show Green Only Button Clicked");
        inputFile = readImage();

        for (int x = 0; x < inputFile.getWidth(); x++) {
            for (int y = 0; y < inputFile.getHeight(); y++) {
                int rgba = inputFile.getRGB(x, y);
                Color col = new Color(rgba, true);
                col = new Color(0, col.getGreen(), 0, col.getAlpha());
                inputFile.setRGB(x, y, col.getRGB());
            }
        }
        lblImage.setIcon(new ImageIcon(inputFile));
        System.out.println("Image Processing Show Green Done");
    }//GEN-LAST:event_btnShowGreenActionPerformed

    private void btnShowBlueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowBlueActionPerformed
        System.out.println("Show Blue Only Button Clicked");
        inputFile = readImage();

        for (int x = 0; x < inputFile.getWidth(); x++) {
            for (int y = 0; y < inputFile.getHeight(); y++) {
                int rgba = inputFile.getRGB(x, y);
                Color col = new Color(rgba, true);
                col = new Color(0, 0, col.getBlue(), col.getAlpha());
                inputFile.setRGB(x, y, col.getRGB());
            }
        }
        lblImage.setIcon(new ImageIcon(inputFile));
        System.out.println("Image Processing Show Blue Done");
    }//GEN-LAST:event_btnShowBlueActionPerformed

    private void btnTransparencyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTransparencyActionPerformed
        System.out.println("Transparency Button Clicked");
        inputFile = readImage();

        String alphaValueInputDialog = JOptionPane.showInputDialog("Input transparency range [0-255] :");
        if(alphaValueInputDialog == null){
            System.out.println("Transparency Cancelled");
        } else if (isNotANonNegativeNumber(alphaValueInputDialog)){
           showErrorInputIsNotANonNegativeNumber();
        } else {
            int newAlpha = Integer.parseInt(alphaValueInputDialog);
            for (int x = 0; x < inputFile.getWidth(); x++) {
                for (int y = 0; y < inputFile.getHeight(); y++) {
                    int rgba = inputFile.getRGB(x, y);
                    Color col = new Color(rgba, true);
                    col = new Color(col.getRed(), col.getGreen(), col.getBlue(),
                            (newAlpha < 0 ? 0 : newAlpha > 255 ? 255 : newAlpha) & col.getAlpha());
                    inputFile.setRGB(x, y, col.getRGB());
                }
            }
        }
        lblImage.setIcon(new ImageIcon(inputFile));
        System.out.println("Image Processing Transparency Done");
    }//GEN-LAST:event_btnTransparencyActionPerformed
    
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ custom attributes

    BufferedImage inputFile;
    String pathImage;
    static final int COL_RED = 0;
    static final int COL_GREEN = 1;
    static final int COL_BLUE = 2;
    static final int COL_ALPHA = 3;

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ generated attributes

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBlur;
    private javax.swing.JButton btnBrighter;
    private javax.swing.JButton btnDarker;
    private javax.swing.JButton btnFailureBlur;
    private javax.swing.JButton btnGaussianBlur;
    private javax.swing.JButton btnGreyScale;
    private javax.swing.JButton btnInvert;
    private javax.swing.JButton btnMonoChrome;
    private javax.swing.JButton btnMotionBlur;
    private javax.swing.JButton btnNormal;
    private javax.swing.JButton btnPixelated;
    private javax.swing.JButton btnSepia;
    private javax.swing.JButton btnShowBlue;
    private javax.swing.JButton btnShowGreen;
    private javax.swing.JButton btnShowRed;
    private javax.swing.JButton btnTransparency;
    private javax.swing.JLabel lblImage;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuBar menubarMain;
    private javax.swing.JMenuItem menuitemOpenImage;
    private javax.swing.JMenuItem menuitemSaveImage;
    private javax.swing.JPanel pnlButton;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JScrollPane scrlpnMain;
    // End of variables declaration//GEN-END:variables
}
