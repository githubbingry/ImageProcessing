
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Fachry Ghifary
 */
public class ImageProcessor extends javax.swing.JFrame {

    /**
     * Creates new form ImageProcessor
     */
    public ImageProcessor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrlpnMain = new javax.swing.JScrollPane();
        pnlMain = new javax.swing.JPanel();
        lblImage = new javax.swing.JLabel();
        pnlButton = new javax.swing.JPanel();
        btnFailureBlur = new javax.swing.JButton();
        btnBrighter = new javax.swing.JButton();
        btnMonoChrome = new javax.swing.JButton();
        btnInvertImage = new javax.swing.JButton();
        btnReturnNormal = new javax.swing.JButton();
        btnSepia = new javax.swing.JButton();
        btnGreyScale = new javax.swing.JButton();
        btnGaussianBlur = new javax.swing.JButton();
        btnDarker = new javax.swing.JButton();
        btnBlur = new javax.swing.JButton();
        btnPixelated = new javax.swing.JButton();
        btnShowRedOnly = new javax.swing.JButton();
        btnShowGreenOnly = new javax.swing.JButton();
        btnShowBlueOnly = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuOpenImage = new javax.swing.JMenu();
        mnitOpenImage = new javax.swing.JMenuItem();
        mnitSaveImage = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(171, 205, 239));

        scrlpnMain.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 102), 2));

        pnlMain.setBackground(new java.awt.Color(171, 205, 239));

        lblImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImage.setToolTipText("Choose a picture (.png/.jpg/.jpeg)");
        lblImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 102), 2));
        lblImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblImageMouseClicked(evt);
            }
        });

        pnlButton.setBackground(new java.awt.Color(18, 52, 86));
        pnlButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 102), 2, true));

        btnFailureBlur.setText("Failure Blur Image");
        btnFailureBlur.setEnabled(false);
        btnFailureBlur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFailureBlurActionPerformed(evt);
            }
        });

        btnBrighter.setText("Brighter");
        btnBrighter.setEnabled(false);
        btnBrighter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrighterActionPerformed(evt);
            }
        });

        btnMonoChrome.setText("MonoChrome Image");
        btnMonoChrome.setEnabled(false);
        btnMonoChrome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMonoChromeActionPerformed(evt);
            }
        });

        btnInvertImage.setText("Invert Image");
        btnInvertImage.setEnabled(false);
        btnInvertImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInvertImageActionPerformed(evt);
            }
        });

        btnReturnNormal.setText("Return Normal");
        btnReturnNormal.setEnabled(false);
        btnReturnNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnNormalActionPerformed(evt);
            }
        });

        btnSepia.setText("Sepia Image");
        btnSepia.setEnabled(false);
        btnSepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSepiaActionPerformed(evt);
            }
        });

        btnGreyScale.setText("GreyScale Image");
        btnGreyScale.setEnabled(false);
        btnGreyScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGreyScaleActionPerformed(evt);
            }
        });

        btnGaussianBlur.setText("Gaussian Blur Image");
        btnGaussianBlur.setEnabled(false);
        btnGaussianBlur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGaussianBlurActionPerformed(evt);
            }
        });

        btnDarker.setText("Darker");
        btnDarker.setEnabled(false);
        btnDarker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDarkerActionPerformed(evt);
            }
        });

        btnBlur.setText("Blur Image");
        btnBlur.setEnabled(false);
        btnBlur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBlurActionPerformed(evt);
            }
        });

        btnPixelated.setText("Pixelated Image");
        btnPixelated.setEnabled(false);
        btnPixelated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPixelatedActionPerformed(evt);
            }
        });

        btnShowRedOnly.setText("Show Red Only");
        btnShowRedOnly.setEnabled(false);
        btnShowRedOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowRedOnlyActionPerformed(evt);
            }
        });

        btnShowGreenOnly.setText("Show Green Only");
        btnShowGreenOnly.setEnabled(false);
        btnShowGreenOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowGreenOnlyActionPerformed(evt);
            }
        });

        btnShowBlueOnly.setText("Show Blue Only");
        btnShowBlueOnly.setEnabled(false);
        btnShowBlueOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowBlueOnlyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlButtonLayout = new javax.swing.GroupLayout(pnlButton);
        pnlButton.setLayout(pnlButtonLayout);
        pnlButtonLayout.setHorizontalGroup(
            pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlButtonLayout.createSequentialGroup()
                        .addComponent(btnDarker)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBrighter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnShowRedOnly)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnShowGreenOnly)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnShowBlueOnly))
                    .addGroup(pnlButtonLayout.createSequentialGroup()
                        .addComponent(btnReturnNormal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnInvertImage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnGreyScale)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSepia)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnMonoChrome))
                    .addGroup(pnlButtonLayout.createSequentialGroup()
                        .addComponent(btnFailureBlur)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnGaussianBlur)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBlur)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPixelated)))
                .addContainerGap(355, Short.MAX_VALUE))
        );
        pnlButtonLayout.setVerticalGroup(
            pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInvertImage)
                    .addComponent(btnGreyScale)
                    .addComponent(btnReturnNormal)
                    .addComponent(btnSepia)
                    .addComponent(btnMonoChrome))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFailureBlur)
                    .addComponent(btnGaussianBlur)
                    .addComponent(btnBlur)
                    .addComponent(btnPixelated))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnBrighter)
                        .addComponent(btnShowRedOnly)
                        .addComponent(btnShowGreenOnly)
                        .addComponent(btnShowBlueOnly))
                    .addComponent(btnDarker))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblImage, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        scrlpnMain.setViewportView(pnlMain);

        jMenuBar1.setBackground(new java.awt.Color(18, 52, 86));
        jMenuBar1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 102), 0, true));
        jMenuBar1.setForeground(new java.awt.Color(18, 52, 86));

        menuOpenImage.setBackground(new java.awt.Color(18, 52, 86));
        menuOpenImage.setForeground(new java.awt.Color(171, 205, 239));
        menuOpenImage.setText("File");

        mnitOpenImage.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mnitOpenImage.setBackground(new java.awt.Color(18, 52, 86));
        mnitOpenImage.setForeground(new java.awt.Color(171, 205, 239));
        mnitOpenImage.setText("Open Image");
        mnitOpenImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnitOpenImageActionPerformed(evt);
            }
        });
        menuOpenImage.add(mnitOpenImage);

        mnitSaveImage.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mnitSaveImage.setBackground(new java.awt.Color(18, 52, 86));
        mnitSaveImage.setForeground(new java.awt.Color(171, 205, 239));
        mnitSaveImage.setText("Save Image");
        mnitSaveImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnitSaveImageActionPerformed(evt);
            }
        });
        menuOpenImage.add(mnitSaveImage);

        jMenuBar1.add(menuOpenImage);

        menuEdit.setBackground(new java.awt.Color(18, 52, 86));
        menuEdit.setForeground(new java.awt.Color(171, 205, 239));
        menuEdit.setText("Edit");
        jMenuBar1.add(menuEdit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrlpnMain, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 969, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(scrlpnMain, javax.swing.GroupLayout.DEFAULT_SIZE, 665, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void enableButton(){
        btnReturnNormal.setEnabled(true);
        btnInvertImage.setEnabled(true);
        btnGreyScale.setEnabled(true);
        btnSepia.setEnabled(true);
        btnMonoChrome.setEnabled(true);
        
        btnFailureBlur.setEnabled(true);
        btnGaussianBlur.setEnabled(true);
        btnBlur.setEnabled(true);
        btnPixelated.setEnabled(true);
        
        btnBrighter.setEnabled(true);
        btnDarker.setEnabled(true);
        btnShowRedOnly.setEnabled(true);
        btnShowGreenOnly.setEnabled(true);
        btnShowBlueOnly.setEnabled(true);
    }
    
    private void openFileImage(){
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(System.getProperty("user.dir")));
        if (fc.showDialog(null, "Choose Image") == JFileChooser.APPROVE_OPTION){
            pathImage = fc.getSelectedFile().getPath();
            ImageIcon image = new ImageIcon(pathImage);
            lblImage.setIcon(image);
            enableButton();
        }
    }
    
    private void mnitOpenImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnitOpenImageActionPerformed
        openFileImage();
    }//GEN-LAST:event_mnitOpenImageActionPerformed

    private BufferedImage readImage(){
        try {
            if (pathImage == null && inputFile == null){
                openFileImage();
            } else {
                inputFile = ImageIO.read(new File(pathImage));
            }
        } catch (IOException e) {
        }
        return inputFile;
    }
    
    private void btnInvertImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInvertImageActionPerformed
        System.out.println("Invert Image Button Clicked");
        inputFile = readImage();

        for (int x = 0; x < inputFile.getWidth(); x++) {
            for (int y = 0; y < inputFile.getHeight(); y++) {
                int rgba = inputFile.getRGB(x, y);
                Color col = new Color(rgba, true);
                col = new Color(255 - col.getRed(),
                                255 - col.getGreen(),
                                255 - col.getBlue(),
                                col.getAlpha());
                inputFile.setRGB(x, y, col.getRGB());
            }
        }
        lblImage.setIcon(new ImageIcon(inputFile));
        System.out.println("Image Processing Invert Done");
    }//GEN-LAST:event_btnInvertImageActionPerformed

    private void btnGreyScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGreyScaleActionPerformed
        System.out.println("GreyScale Button Clicked");
        inputFile = readImage();

        for (int x = 0; x < inputFile.getWidth(); x++) {
            for (int y = 0; y < inputFile.getHeight(); y++) {
                int rgba = inputFile.getRGB(x, y);
                Color col = new Color(rgba, true);
                int greyLevel = (col.getRed() + col.getGreen()+ col.getBlue())/3;
                col = new Color((col.getAlpha() << 24)
                                + (greyLevel << 16)
                                + (greyLevel << 8)
                                + greyLevel,
                                true);
                inputFile.setRGB(x, y, col.getRGB());
            }
        }
        lblImage.setIcon(new ImageIcon(inputFile));
        System.out.println("Image Processing GreyScale Done");
    }//GEN-LAST:event_btnGreyScaleActionPerformed

    private void btnMonoChromeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMonoChromeActionPerformed
        System.out.println("MonoChrome Image Button Clicked");
        inputFile = readImage();

        for (int x = 0; x < inputFile.getWidth(); x++) {
            for (int y = 0; y < inputFile.getHeight(); y++) {
                int rgba = inputFile.getRGB(x, y);
                Color col = new Color(rgba, true);
                int MONO_THRESHOLD = 368;
                if (col.getRed() + col.getGreen() + col.getBlue() > MONO_THRESHOLD)
                    col = new Color(255, 255, 255, col.getAlpha());
                else
                    col = new Color(0, 0, 0, col.getAlpha());
                inputFile.setRGB(x, y, col.getRGB());
            }
        }
        lblImage.setIcon(new ImageIcon(inputFile));
        System.out.println("Image Processing MonoChrome Done");
    }//GEN-LAST:event_btnMonoChromeActionPerformed

    private void btnReturnNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnNormalActionPerformed
        System.out.println("Return Normal Button Clicked");
        ImageIcon image = new ImageIcon(pathImage);   
        lblImage.setIcon(image);
        System.out.println("Return Normal Done");
    }//GEN-LAST:event_btnReturnNormalActionPerformed

    private void btnSepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSepiaActionPerformed
        System.out.println("Sepia Image Button Clicked");
        inputFile = readImage();

        for (int x = 0; x < inputFile.getWidth(); x++) {
            for (int y = 0; y < inputFile.getHeight(); y++) {
                int rgba = inputFile.getRGB(x, y);
                Color col = new Color(rgba, true);
                int R = col.getRed();
                int G = col.getGreen();
                int B = col.getBlue();
                int newR = (int)(0.393*R + 0.769*G + 0.189*B);
                int newG = (int)(0.349*R + 0.686*G + 0.168*B);
                int newB = (int)(0.272*R + 0.534*G + 0.131*B);
                col = new Color ((newR > 255 ? 255 : newR)
                                ,(newG > 255 ? 255 : newG)
                                ,(newB > 255 ? 255 : newB)
                                ,col.getAlpha());
                inputFile.setRGB(x, y, col.getRGB());
            }
        }
        lblImage.setIcon(new ImageIcon(inputFile));
        System.out.println("Image Processing Sepia Done");
    }//GEN-LAST:event_btnSepiaActionPerformed

    private void lblImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblImageMouseClicked
        openFileImage();
    }//GEN-LAST:event_lblImageMouseClicked

    private void btnBrighterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrighterActionPerformed
        System.out.println("Brighter Button Clicked");
        inputFile = readImage();

        for (int x = 0; x < inputFile.getWidth(); x++) {
            for (int y = 0; y < inputFile.getHeight(); y++) {
                int rgba = inputFile.getRGB(x, y);
                Color col = new Color(rgba, true);
                col = new Color(
                        (col.getRed()+25 > 255 ? 255 : col.getRed()+25)
                        , (col.getGreen()+25 > 255 ? 255 : col.getGreen()+25)
                        , col.getBlue()+25 > 255 ? 255 : col.getBlue()+25
                        ,col.getAlpha());
                inputFile.setRGB(x, y, col.getRGB());
            }
        }
        lblImage.setIcon(new ImageIcon(inputFile));
        System.out.println("Image Processing Brighter Done");
    }//GEN-LAST:event_btnBrighterActionPerformed

    private void btnDarkerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDarkerActionPerformed
        System.out.println("Darker Button Clicked");
        inputFile = readImage();

        for (int x = 0; x < inputFile.getWidth(); x++) {
            for (int y = 0; y < inputFile.getHeight(); y++) {
                int rgba = inputFile.getRGB(x, y);
                Color col = new Color(rgba, true);
                col = new Color(
                        (col.getRed()-25 < 0 ? 0 : col.getRed()-25)
                        , (col.getGreen()-25 < 0 ? 0 : col.getGreen()-25)
                        , col.getBlue()-25 < 0 ? 0 : col.getBlue()-25
                        , col.getAlpha());
                inputFile.setRGB(x, y, col.getRGB());
            }
        }
        lblImage.setIcon(new ImageIcon(inputFile));
        System.out.println("Image Processing Darker Done");
    }//GEN-LAST:event_btnDarkerActionPerformed

    private boolean isNotNumber(String s){
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) < '0' || s.charAt(i) > '9'){
                return true;
            }
        }
        return false;
    }
    
    private void showErrorInputIsNotANumber(){
        JOptionPane.showMessageDialog(null, "Input must be a non-negative number!", "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    private void showErrorInputIsTooBig(){
        JOptionPane.showMessageDialog(null, "Input is too big!", "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    private void btnFailureBlurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFailureBlurActionPerformed
        System.out.println("Failure Blur Button Clicked");
        inputFile = readImage();
        String rangeInputDialog = JOptionPane.showInputDialog("Input blur range");
        if(rangeInputDialog == null){
            System.out.println("Failure Blur Cancelled");
        } else if (isNotNumber(rangeInputDialog)){
           showErrorInputIsNotANumber();
        } else {
            System.out.println("Processing");
            int[][] rgbaArray = new int[inputFile.getWidth()][inputFile.getHeight()];
            for (int x = 0; x < inputFile.getWidth(); x++) {
                for (int y = 0; y < inputFile.getHeight(); y++) {
                    rgbaArray[x][y] = inputFile.getRGB(x, y);
                }
            }
            int rangeBlurAdj = Integer.parseInt(rangeInputDialog);
            for (int x = 0; x < inputFile.getWidth(); x++) {
                for (int y = 0; y < inputFile.getHeight(); y++) {
                    long sumRGBPixel = 0;
                    for (int i = -rangeBlurAdj; i <= rangeBlurAdj; i++) {
                        for (int j = -rangeBlurAdj; j <= rangeBlurAdj; j++) {
                            if ((x+i < 0 || x+i > inputFile.getWidth()-1) || (y+j < 0 || y+j > inputFile.getHeight()-1)){
                                // out of bounds then set to this pixel value
                                sumRGBPixel += rgbaArray[x][y];
                            } else {
                                sumRGBPixel += rgbaArray[x+i][y+j];
                            }
                        }
                    }
                    long pixelCount = 1 + rangeBlurAdj*2;
                    pixelCount *= pixelCount;
                    Color col = new Color((int)(sumRGBPixel/pixelCount), true);
                    inputFile.setRGB(x, y, col.getRGB());
                }
            }
            lblImage.setIcon(new ImageIcon(inputFile));
        }
    }//GEN-LAST:event_btnFailureBlurActionPerformed

    private int[][] GaussianGrid(int range){
        int[][] a = new int[2*range+1][2*range+1];
        for (int i = -range; i <= 0; i++) {
            for (int j = -range; j <= 0; j++) {
                a[range+i][range+j] = (int)(Math.pow(2, 2*range-Math.abs(i+j)));
            }
            for (int j = -1; j >= -range; j--) {
                a[range+i][range+j] = (int)(Math.pow(2, 2*range-Math.abs(i+j)));
            }
        }
        for (int i = -1; i >= -range; i--) {
            for (int j = -range; j <= 0; j++) {
                a[range+i][range+j] = (int)(Math.pow(2, 2*range-Math.abs(i+j)));
            }
            for (int j = -1; j >= -range; j--) {
                a[range+i][range+j] = (int)(Math.pow(2, 2*range-Math.abs(i+j)));
            }
        }
        return a;
    }
    
    private int[][][] rgbValueImage(){
       int[][][] rgbaArray = new int[inputFile.getWidth()][inputFile.getHeight()][4];
        for (int x = 0; x < inputFile.getWidth(); x++) {
            for (int y = 0; y < inputFile.getHeight(); y++) {
                Color col = new Color(inputFile.getRGB(x, y), true);
                rgbaArray[x][y][COL_RED] = col.getRed();
                rgbaArray[x][y][COL_GREEN] = col.getGreen();
                rgbaArray[x][y][COL_BLUE] = col.getBlue();
                rgbaArray[x][y][COL_ALPHA] = col.getAlpha();
            }
        }
        return rgbaArray;
    }

    private long[] sumRGBPixel(int rangeBlurAdj, int x, int y, int[][][] rgbaArray, int[][] constantGrid){
        long[] sumRGBPixel = new long[4];
        if (constantGrid == null){
            for (int i = -rangeBlurAdj; i <= rangeBlurAdj; i++) {
                for (int j = -rangeBlurAdj; j <= rangeBlurAdj; j++) {
                    if ((x+i < 0 || x+i > inputFile.getWidth()-1) || (y+j < 0 || y+j > inputFile.getHeight()-1)){
                        // out of bounds then set to this pixel value
                        sumRGBPixel[COL_RED] += rgbaArray[x][y][COL_RED];
                        sumRGBPixel[COL_GREEN] += rgbaArray[x][y][COL_GREEN];
                        sumRGBPixel[COL_BLUE] += rgbaArray[x][y][COL_BLUE];
                        sumRGBPixel[COL_ALPHA] += rgbaArray[x][y][COL_ALPHA];
                    } else {
                        sumRGBPixel[COL_RED] += rgbaArray[x+i][y+j][COL_RED];
                        sumRGBPixel[COL_GREEN] += rgbaArray[x+i][y+j][COL_GREEN];
                        sumRGBPixel[COL_BLUE] += rgbaArray[x+i][y+j][COL_BLUE];
                        sumRGBPixel[COL_ALPHA] += rgbaArray[x+i][y+j][COL_ALPHA];
                    }
                }
            }
        } else {
            for (int i = -rangeBlurAdj; i <= rangeBlurAdj; i++) {
                for (int j = -rangeBlurAdj; j <= rangeBlurAdj; j++) {
                    if ((x+i < 0 || x+i > inputFile.getWidth()-1) || (y+j < 0 || y+j > inputFile.getHeight()-1)){
                        // out of bounds then set to this pixel value
                        sumRGBPixel[COL_RED] += constantGrid[rangeBlurAdj+i][rangeBlurAdj+j]*rgbaArray[x][y][COL_RED];
                        sumRGBPixel[COL_GREEN] += constantGrid[rangeBlurAdj+i][rangeBlurAdj+j]*rgbaArray[x][y][COL_GREEN];
                        sumRGBPixel[COL_BLUE] += constantGrid[rangeBlurAdj+i][rangeBlurAdj+j]*rgbaArray[x][y][COL_BLUE];
                        sumRGBPixel[COL_ALPHA] += constantGrid[rangeBlurAdj+i][rangeBlurAdj+j]*rgbaArray[x][y][COL_ALPHA];
                    } else {
                        sumRGBPixel[COL_RED] += constantGrid[rangeBlurAdj+i][rangeBlurAdj+j]*rgbaArray[x+i][y+j][COL_RED];
                        sumRGBPixel[COL_GREEN] += constantGrid[rangeBlurAdj+i][rangeBlurAdj+j]*rgbaArray[x+i][y+j][COL_GREEN];
                        sumRGBPixel[COL_BLUE] += constantGrid[rangeBlurAdj+i][rangeBlurAdj+j]*rgbaArray[x+i][y+j][COL_BLUE];
                        sumRGBPixel[COL_ALPHA] += constantGrid[rangeBlurAdj+i][rangeBlurAdj+j]*rgbaArray[x+i][y+j][COL_ALPHA];
                    }
                }
            }
        }
        return sumRGBPixel;
    }
    
    private void btnGaussianBlurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGaussianBlurActionPerformed
        System.out.println("Gaussian Blur Button Clicked");
        inputFile = readImage();

        String rangeInputDialog = JOptionPane.showInputDialog("Input blur range");
        if(rangeInputDialog == null){
            System.out.println("Gaussian Blur Cancelled");
        } else if (isNotNumber(rangeInputDialog)){
           showErrorInputIsNotANumber();
        } else {
            int rangeBlurAdj = Integer.parseInt(rangeInputDialog);
            if (rangeBlurAdj > 10){
                showErrorInputIsTooBig();
                System.out.println("Gaussian Blur Cancelled");
            } 
            System.out.println("Processing");
            int[][][] rgbaArray = rgbValueImage();
            int[][] gaussianGrid = GaussianGrid(rangeBlurAdj);
            long pixelCount = (long)(3*Math.pow(2, rangeBlurAdj)-2);
            pixelCount *= pixelCount;
            for (int x = 0; x < inputFile.getWidth(); x++) {
                for (int y = 0; y < inputFile.getHeight(); y++) {
                    long[] sumRGBPixel = sumRGBPixel(rangeBlurAdj, x, y, rgbaArray, gaussianGrid);
                    Color col = new Color((int)(sumRGBPixel[COL_RED]/pixelCount),
                                        (int)(sumRGBPixel[COL_GREEN]/pixelCount),
                                        (int)(sumRGBPixel[COL_BLUE]/pixelCount),
                                        (int)(sumRGBPixel[COL_ALPHA]/pixelCount));
                    inputFile.setRGB(x, y, col.getRGB());
                }
            }
            lblImage.setIcon(new ImageIcon(inputFile));
            System.out.println("Image Processing Gaussian Blur Done");
        }
    }//GEN-LAST:event_btnGaussianBlurActionPerformed

    private void mnitSaveImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnitSaveImageActionPerformed
        System.out.println("Save Image Clicked");
        String fileName = JOptionPane.showInputDialog("Input File Name : (must include the image extension, i.e : .jpeg/.jpg/.png)");
        if (fileName == null){
            showErrorInputIsNotANumber();
            System.out.println("Save Failed");
        } else {
            try {
                // change the directory to ur liking
                ImageIO.write(inputFile, "png", new File(System.getProperty("user.dir")+"\\src\\saved_images\\"+fileName));
                System.out.println("Save Success");
            } catch (IOException ex) {
                Logger.getLogger(ImageProcessor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_mnitSaveImageActionPerformed

    private void btnBlurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBlurActionPerformed
        System.out.println("Blur Button Clicked");
        inputFile = readImage();

        String rangeInputDialog = JOptionPane.showInputDialog("Input blur range");
        if(rangeInputDialog == null){
            System.out.println("Blur Cancelled");
        } else if (isNotNumber(rangeInputDialog)){
           showErrorInputIsNotANumber();
        } else {
            System.out.println("Processing");
            int rangeBlurAdj = Integer.parseInt(rangeInputDialog);
            int[][][] rgbaArray = rgbValueImage();
            long pixelCount = 2*rangeBlurAdj+1;
            pixelCount *= pixelCount;
            for (int x = 0; x < inputFile.getWidth(); x++) {
                for (int y = 0; y < inputFile.getHeight(); y++) {
                    long[] sumRGBPixel = sumRGBPixel(rangeBlurAdj, x, y, rgbaArray, null);
                    Color col = new Color((int)(sumRGBPixel[COL_RED]/pixelCount),
                                        (int)(sumRGBPixel[COL_GREEN]/pixelCount),
                                        (int)(sumRGBPixel[COL_BLUE]/pixelCount),
                                        (int)(sumRGBPixel[COL_ALPHA]/pixelCount));
                    inputFile.setRGB(x, y, col.getRGB());
                }
            }
            lblImage.setIcon(new ImageIcon(inputFile));
            System.out.println("Image Processing Blur Done");
        }
    }//GEN-LAST:event_btnBlurActionPerformed

    private void btnPixelatedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPixelatedActionPerformed
        System.out.println("Pixelated Button Clicked");
        inputFile = readImage();

        String rangeInputDialog = JOptionPane.showInputDialog("Input pixel range");
        if(rangeInputDialog == null){
            System.out.println("Pixelated Cancelled");
        } else if (isNotNumber(rangeInputDialog)){
           showErrorInputIsNotANumber();
        } else {
            System.out.println("Processing");
            int rangeBlurAdj = Integer.parseInt(rangeInputDialog);
            int[][][] rgbaArray = rgbValueImage();
            long pixelCount = 2*rangeBlurAdj+1;
            pixelCount *= pixelCount;
            for (int x = rangeBlurAdj; x < inputFile.getWidth(); x+=2*rangeBlurAdj+1) {
                for (int y = rangeBlurAdj; y < inputFile.getHeight(); y+=2*rangeBlurAdj+1) {
                    long[] sumRGBPixel = sumRGBPixel(rangeBlurAdj, x, y, rgbaArray, null);
                    Color col = new Color((int)(sumRGBPixel[COL_RED]/pixelCount),
                                        (int)(sumRGBPixel[COL_GREEN]/pixelCount),
                                        (int)(sumRGBPixel[COL_BLUE]/pixelCount),
                                        (int)(sumRGBPixel[COL_ALPHA]/pixelCount));
                    for (int i = -rangeBlurAdj; i <= rangeBlurAdj; i++) {
                        for (int j = -rangeBlurAdj; j <= rangeBlurAdj; j++) {
                            if ((x+i < 0 || x+i > inputFile.getWidth()-1) || (y+j < 0 || y+j > inputFile.getHeight()-1)){
                                // do nothing cuz out of bound
                            } else {
                                inputFile.setRGB(x+i, y+j, col.getRGB());
                            }
                        }
                    }
                }
            }
            lblImage.setIcon(new ImageIcon(inputFile));
            System.out.println("Image Processing Pixelated Done");
        }
    }//GEN-LAST:event_btnPixelatedActionPerformed

    private void btnShowRedOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowRedOnlyActionPerformed
        System.out.println("Show Red Only Button Clicked");
        inputFile = readImage();

        for (int x = 0; x < inputFile.getWidth(); x++) {
            for (int y = 0; y < inputFile.getHeight(); y++) {
                int rgba = inputFile.getRGB(x, y);
                Color col = new Color(rgba, true);
                col = new Color(col.getRed(), 0, 0, col.getAlpha());
                inputFile.setRGB(x, y, col.getRGB());
            }
        }
        lblImage.setIcon(new ImageIcon(inputFile));
        System.out.println("Image Processing Show Red Only Done");
    }//GEN-LAST:event_btnShowRedOnlyActionPerformed

    private void btnShowGreenOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowGreenOnlyActionPerformed
        System.out.println("Show Green Only Button Clicked");
        inputFile = readImage();

        for (int x = 0; x < inputFile.getWidth(); x++) {
            for (int y = 0; y < inputFile.getHeight(); y++) {
                int rgba = inputFile.getRGB(x, y);
                Color col = new Color(rgba, true);
                col = new Color(0, col.getGreen(), 0, col.getAlpha());
                inputFile.setRGB(x, y, col.getRGB());
            }
        }
        lblImage.setIcon(new ImageIcon(inputFile));
        System.out.println("Image Processing Show Green Only Done");
    }//GEN-LAST:event_btnShowGreenOnlyActionPerformed

    private void btnShowBlueOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowBlueOnlyActionPerformed
        System.out.println("Show Blue Only Button Clicked");
        inputFile = readImage();

        for (int x = 0; x < inputFile.getWidth(); x++) {
            for (int y = 0; y < inputFile.getHeight(); y++) {
                int rgba = inputFile.getRGB(x, y);
                Color col = new Color(rgba, true);
                col = new Color(0, 0, col.getBlue(), col.getAlpha());
                inputFile.setRGB(x, y, col.getRGB());
            }
        }
        lblImage.setIcon(new ImageIcon(inputFile));
        System.out.println("Image Processing Show Blue Only Done");
    }//GEN-LAST:event_btnShowBlueOnlyActionPerformed
    
    public static void run(){
        ImageProcessor ip = new ImageProcessor();
        ip.setIconImage(new ImageIcon(System.getProperty("user.dir")+"\\src\\assets\\logoImageProcessing.png").getImage());
        if (ip.lblImage.getIcon() != null){
            ip.enableButton();
        }
        ip.setTitle("Image Processor");
        ip.setLocationRelativeTo(null);
        ip.setDefaultCloseOperation(EXIT_ON_CLOSE);
        ip.setVisible(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        run();
    }
    
    BufferedImage inputFile;
    String pathImage;
    static final int COL_RED = 0;
    static final int COL_GREEN = 1;
    static final int COL_BLUE = 2;
    static final int COL_ALPHA = 3;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBlur;
    private javax.swing.JButton btnBrighter;
    private javax.swing.JButton btnDarker;
    private javax.swing.JButton btnFailureBlur;
    private javax.swing.JButton btnGaussianBlur;
    private javax.swing.JButton btnGreyScale;
    private javax.swing.JButton btnInvertImage;
    private javax.swing.JButton btnMonoChrome;
    private javax.swing.JButton btnPixelated;
    private javax.swing.JButton btnReturnNormal;
    private javax.swing.JButton btnSepia;
    private javax.swing.JButton btnShowBlueOnly;
    private javax.swing.JButton btnShowGreenOnly;
    private javax.swing.JButton btnShowRedOnly;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel lblImage;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuOpenImage;
    private javax.swing.JMenuItem mnitOpenImage;
    private javax.swing.JMenuItem mnitSaveImage;
    private javax.swing.JPanel pnlButton;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JScrollPane scrlpnMain;
    // End of variables declaration//GEN-END:variables
}
